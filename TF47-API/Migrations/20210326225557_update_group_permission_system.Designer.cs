// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TF47_API.Database;

namespace TF47_API.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210326225557_update_group_permission_system")]
    partial class update_group_permission_system
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresEnum(null, "side", new[] { "civilian", "bluefor", "redfor", "independent" })
                .HasPostgresEnum(null, "vehicle_type", new[] { "infantry", "light_vehicle", "tank", "helicopter", "fixed_wing", "boat" })
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<long>("GroupsGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("groups_group_id");

                    b.Property<Guid>("UsersUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("users_user_id");

                    b.HasKey("GroupsGroupId", "UsersUserId")
                        .HasName("pk_service_user_groups");

                    b.HasIndex("UsersUserId")
                        .HasDatabaseName("ix_service_user_groups_users_user_id");

                    b.ToTable("ServiceUserGroups");
                });

            modelBuilder.Entity("IssueIssueTag", b =>
                {
                    b.Property<long>("IssueTagsIssueTagId")
                        .HasColumnType("bigint")
                        .HasColumnName("issue_tags_issue_tag_id");

                    b.Property<long>("IssuesIssueId")
                        .HasColumnType("bigint")
                        .HasColumnName("issues_issue_id");

                    b.HasKey("IssueTagsIssueTagId", "IssuesIssueId")
                        .HasName("pk_service_issue_has_tags");

                    b.HasIndex("IssuesIssueId")
                        .HasDatabaseName("ix_service_issue_has_tags_issues_issue_id");

                    b.ToTable("ServiceIssueHasTags");
                });

            modelBuilder.Entity("PlayerWhitelist", b =>
                {
                    b.Property<long>("PlayerWhitelistingsWhitelistId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_whitelistings_whitelist_id");

                    b.Property<string>("PlayersPlayerUid")
                        .HasColumnType("character varying(100)")
                        .HasColumnName("players_player_uid");

                    b.HasKey("PlayerWhitelistingsWhitelistId", "PlayersPlayerUid")
                        .HasName("pk_game_server_player_whitelistings");

                    b.HasIndex("PlayersPlayerUid")
                        .HasDatabaseName("ix_game_server_player_whitelistings_players_player_uid");

                    b.ToTable("GameServerPlayerWhitelistings");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.AAR.ReplayItem", b =>
                {
                    b.Property<long>("ReplayItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("replay_item_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<long>("GameTickTime")
                        .HasColumnType("bigint")
                        .HasColumnName("game_tick_time");

                    b.Property<string>("GameTime")
                        .HasColumnType("text")
                        .HasColumnName("game_time");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint")
                        .HasColumnName("session_id");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.HasKey("ReplayItemId")
                        .HasName("pk_game_server_replay_items");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_game_server_replay_items_session_id");

                    b.ToTable("GameServerReplayItems");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Campaign", b =>
                {
                    b.Property<long>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("campaign_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_created");

                    b.HasKey("CampaignId")
                        .HasName("pk_game_server_campaigns");

                    b.ToTable("GameServerCampaigns");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Chat", b =>
                {
                    b.Property<long>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("chat_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("channel");

                    b.Property<string>("PlayerId")
                        .HasColumnType("character varying(100)")
                        .HasColumnName("player_id");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint")
                        .HasColumnName("session_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("text");

                    b.Property<DateTime>("TimeSend")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_send");

                    b.HasKey("ChatId")
                        .HasName("pk_game_server_chats");

                    b.HasIndex("Channel")
                        .HasDatabaseName("ix_game_server_chats_channel");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_game_server_chats_player_id");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_game_server_chats_session_id");

                    b.ToTable("GameServerChats");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Kill", b =>
                {
                    b.Property<long>("KillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("kill_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Distance")
                        .HasColumnType("bigint")
                        .HasColumnName("distance");

                    b.Property<long>("GameTime")
                        .HasColumnType("bigint")
                        .HasColumnName("game_time");

                    b.Property<string>("KillerId")
                        .HasColumnType("character varying(100)")
                        .HasColumnName("killer_id");

                    b.Property<int>("KillerSide")
                        .HasColumnType("integer")
                        .HasColumnName("killer_side");

                    b.Property<int>("KillerVehicleType")
                        .HasColumnType("integer")
                        .HasColumnName("killer_vehicle_type");

                    b.Property<DateTime>("RealTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("real_time");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint")
                        .HasColumnName("session_id");

                    b.Property<string>("VehicleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vehicle_name");

                    b.Property<string>("VictimId")
                        .HasColumnType("character varying(100)")
                        .HasColumnName("victim_id");

                    b.Property<int>("VictimSide")
                        .HasColumnType("integer")
                        .HasColumnName("victim_side");

                    b.Property<int>("VictimVehicleType")
                        .HasColumnType("integer")
                        .HasColumnName("victim_vehicle_type");

                    b.Property<string>("Weapon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("weapon");

                    b.HasKey("KillId")
                        .HasName("pk_game_server_kills");

                    b.HasIndex("KillerId")
                        .HasDatabaseName("ix_game_server_kills_killer_id");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_game_server_kills_session_id");

                    b.HasIndex("VictimId")
                        .HasDatabaseName("ix_game_server_kills_victim_id");

                    b.ToTable("GameServerKills");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Mission", b =>
                {
                    b.Property<long>("MissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("mission_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CampaignId")
                        .HasColumnType("bigint")
                        .HasColumnName("campaign_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<int>("MissionType")
                        .HasColumnType("integer")
                        .HasColumnName("mission_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("MissionId")
                        .HasName("pk_game_server_mission");

                    b.HasIndex("CampaignId")
                        .HasDatabaseName("ix_game_server_mission_campaign_id");

                    b.ToTable("GameServerMission");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Note", b =>
                {
                    b.Property<long>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("note_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<string>("PlayerId")
                        .HasColumnType("character varying(100)")
                        .HasColumnName("player_id");

                    b.Property<string>("Text")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("text");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_created");

                    b.Property<DateTime?>("TimeLastUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_last_update");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uuid")
                        .HasColumnName("writer_id");

                    b.HasKey("NoteId")
                        .HasName("pk_game_server_notes");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_game_server_notes_player_id");

                    b.HasIndex("WriterId")
                        .HasDatabaseName("ix_game_server_notes_writer_id");

                    b.ToTable("GameServerNotes");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Player", b =>
                {
                    b.Property<string>("PlayerUid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("player_uid");

                    b.Property<DateTime?>("FirstVisit")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("first_visit");

                    b.Property<DateTime?>("LastVisit")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_visit");

                    b.Property<string>("PlayerName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("player_name");

                    b.HasKey("PlayerUid")
                        .HasName("pk_game_server_players");

                    b.ToTable("GameServerPlayers");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Playtime", b =>
                {
                    b.Property<string>("PlayerId")
                        .HasColumnType("character varying(100)")
                        .HasColumnName("player_id");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint")
                        .HasColumnName("session_id");

                    b.Property<TimeSpan>("TimePlayedBoat")
                        .HasColumnType("interval")
                        .HasColumnName("time_played_boat");

                    b.Property<TimeSpan>("TimePlayedFixedWing")
                        .HasColumnType("interval")
                        .HasColumnName("time_played_fixed_wing");

                    b.Property<TimeSpan>("TimePlayedHelicopter")
                        .HasColumnType("interval")
                        .HasColumnName("time_played_helicopter");

                    b.Property<TimeSpan>("TimePlayedInfantry")
                        .HasColumnType("interval")
                        .HasColumnName("time_played_infantry");

                    b.Property<TimeSpan>("TimePlayedTank")
                        .HasColumnType("interval")
                        .HasColumnName("time_played_tank");

                    b.Property<TimeSpan>("TimePlayedVehicle")
                        .HasColumnType("interval")
                        .HasColumnName("time_played_vehicle");

                    b.Property<TimeSpan>("TimeTrackedObjective")
                        .HasColumnType("interval")
                        .HasColumnName("time_tracked_objective");

                    b.HasKey("PlayerId")
                        .HasName("pk_game_server_playtimes");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_game_server_playtimes_session_id");

                    b.ToTable("GameServerPlaytimes");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Session", b =>
                {
                    b.Property<long>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("session_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("MissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("mission_id");

                    b.Property<int>("MissionType")
                        .HasColumnType("integer")
                        .HasColumnName("mission_type");

                    b.Property<DateTime>("SessionCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("session_created");

                    b.Property<DateTime?>("SessionEnded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("session_ended");

                    b.Property<string>("WorldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("world_name");

                    b.HasKey("SessionId")
                        .HasName("pk_game_server_sessions");

                    b.HasIndex("MissionId")
                        .HasDatabaseName("ix_game_server_sessions_mission_id");

                    b.ToTable("GameServerSessions");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Whitelist", b =>
                {
                    b.Property<long>("WhitelistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("whitelist_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("WhitelistId")
                        .HasName("pk_game_server_whitelists");

                    b.ToTable("GameServerWhitelists");
                });

            modelBuilder.Entity("TF47_API.Database.Models.Services.ApiKey", b =>
                {
                    b.Property<long>("ApiKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("api_key_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApiKeyValue")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("api_key_value");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_created");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("valid_until");

                    b.HasKey("ApiKeyId")
                        .HasName("pk_service_api_keys");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_service_api_keys_owner_id");

                    b.ToTable("ServiceApiKeys");
                });

            modelBuilder.Entity("TF47_API.Database.Models.Services.Changelog", b =>
                {
                    b.Property<long>("ChangelogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("changelog_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("Text")
                        .HasMaxLength(20000)
                        .HasColumnType("character varying(20000)")
                        .HasColumnName("text");

                    b.Property<DateTime>("TimeReleased")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_released");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.HasKey("ChangelogId")
                        .HasName("pk_service_changelogs");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_service_changelogs_author_id");

                    b.ToTable("ServiceChangelogs");
                });

            modelBuilder.Entity("TF47_API.Database.Models.Services.Group", b =>
                {
                    b.Property<long>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("group_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("background_color");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean")
                        .HasColumnName("is_visible");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("TextColor")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("text_color");

                    b.HasKey("GroupId")
                        .HasName("pk_service_groups");

                    b.ToTable("ServiceGroups");
                });

            modelBuilder.Entity("TF47_API.Database.Models.Services.GroupPermission", b =>
                {
                    b.Property<long>("GroupPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("group_permission_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("group_id");

                    b.Property<string>("PermissionsDiscord")
                        .HasColumnType("text")
                        .HasColumnName("permissions_discord");

                    b.Property<string>("PermissionsGadget")
                        .HasColumnType("text")
                        .HasColumnName("permissions_gadget");

                    b.Property<string>("PermissionsTeamspeak")
                        .HasColumnType("text")
                        .HasColumnName("permissions_teamspeak");

                    b.HasKey("GroupPermissionId")
                        .HasName("pk_service_group_permissions");

                    b.HasIndex("GroupId")
                        .IsUnique()
                        .HasDatabaseName("ix_service_group_permissions_group_id");

                    b.ToTable("ServiceGroupPermissions");
                });

            modelBuilder.Entity("TF47_API.Database.Models.Services.Issue", b =>
                {
                    b.Property<long>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("issue_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_closed");

                    b.Property<Guid?>("IssueCreatorUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("issue_creator_user_id");

                    b.Property<long>("IssueGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("issue_group_id");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_created");

                    b.Property<DateTime>("TimeLastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_last_updated");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.HasKey("IssueId")
                        .HasName("pk_service_issues");

                    b.HasIndex("IssueCreatorUserId")
                        .HasDatabaseName("ix_service_issues_issue_creator_user_id");

                    b.HasIndex("IssueGroupId")
                        .HasDatabaseName("ix_service_issues_issue_group_id");

                    b.ToTable("ServiceIssues");
                });

            modelBuilder.Entity("TF47_API.Database.Models.Services.IssueGroup", b =>
                {
                    b.Property<long>("IssueGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("issue_group_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("GroupDescription")
                        .HasColumnType("text")
                        .HasColumnName("group_description");

                    b.Property<string>("GroupName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("group_name");

                    b.Property<DateTime>("TimeGroupCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_group_created");

                    b.HasKey("IssueGroupId")
                        .HasName("pk_service_issue_groups");

                    b.HasIndex("GroupName")
                        .IsUnique()
                        .HasDatabaseName("ix_service_issue_groups_group_name");

                    b.ToTable("ServiceIssueGroups");
                });

            modelBuilder.Entity("TF47_API.Database.Models.Services.IssueItem", b =>
                {
                    b.Property<long>("IssueItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("issue_item_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid?>("AuthorUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_user_id");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean")
                        .HasColumnName("is_edited");

                    b.Property<long>("IssueId")
                        .HasColumnType("bigint")
                        .HasColumnName("issue_id");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_created");

                    b.Property<DateTime?>("TimeLastEdited")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_last_edited");

                    b.HasKey("IssueItemId")
                        .HasName("pk_service_issue_items");

                    b.HasIndex("AuthorUserId")
                        .HasDatabaseName("ix_service_issue_items_author_user_id");

                    b.HasIndex("IssueId")
                        .HasDatabaseName("ix_service_issue_items_issue_id");

                    b.ToTable("ServiceIssueItems");
                });

            modelBuilder.Entity("TF47_API.Database.Models.Services.IssueTag", b =>
                {
                    b.Property<long>("IssueTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("issue_tag_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("color");

                    b.Property<string>("TagName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tag_name");

                    b.HasKey("IssueTagId")
                        .HasName("pk_service_issue_tags");

                    b.HasIndex("TagName")
                        .IsUnique()
                        .HasDatabaseName("ix_service_issue_tags_tag_name");

                    b.ToTable("ServiceIssueTags");
                });

            modelBuilder.Entity("TF47_API.Database.Models.Services.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<bool>("AllowEmails")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_emails");

                    b.Property<bool>("Banned")
                        .HasColumnType("boolean")
                        .HasColumnName("banned");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<string>("DiscordId")
                        .HasColumnType("text")
                        .HasColumnName("discord_id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("FirstTimeSeen")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("first_time_seen");

                    b.Property<DateTime>("LastTimeSeen")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_time_seen");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture");

                    b.Property<string>("ProfileUrl")
                        .HasColumnType("text")
                        .HasColumnName("profile_url");

                    b.Property<string>("SteamId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("steam_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("pk_service_users");

                    b.HasIndex("SteamId")
                        .IsUnique()
                        .HasDatabaseName("ix_service_users_steam_id");

                    b.ToTable("ServiceUsers");
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("TF47_API.Database.Models.Services.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsGroupId")
                        .HasConstraintName("fk_service_user_groups_service_groups_groups_group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TF47_API.Database.Models.Services.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .HasConstraintName("fk_service_user_groups_service_users_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssueIssueTag", b =>
                {
                    b.HasOne("TF47_API.Database.Models.Services.IssueTag", null)
                        .WithMany()
                        .HasForeignKey("IssueTagsIssueTagId")
                        .HasConstraintName("fk_service_issue_has_tags_service_issue_tags_issue_tags_issue_tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TF47_API.Database.Models.Services.Issue", null)
                        .WithMany()
                        .HasForeignKey("IssuesIssueId")
                        .HasConstraintName("fk_service_issue_has_tags_service_issues_issues_issue_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerWhitelist", b =>
                {
                    b.HasOne("TF47_API.Database.Models.GameServer.Whitelist", null)
                        .WithMany()
                        .HasForeignKey("PlayerWhitelistingsWhitelistId")
                        .HasConstraintName("fk_game_server_player_whitelistings_game_server_whitelists_player_w")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TF47_API.Database.Models.GameServer.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersPlayerUid")
                        .HasConstraintName("fk_game_server_player_whitelistings_game_server_players_players_pla")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.AAR.ReplayItem", b =>
                {
                    b.HasOne("TF47_API.Database.Models.GameServer.Session", "Session")
                        .WithMany("ReplayItems")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("fk_game_server_replay_items_game_server_sessions_session_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Chat", b =>
                {
                    b.HasOne("TF47_API.Database.Models.GameServer.Player", "Player")
                        .WithMany("PlayerChats")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("fk_game_server_chats_game_server_players_player_id");

                    b.HasOne("TF47_API.Database.Models.GameServer.Session", "Session")
                        .WithMany("Chats")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("fk_game_server_chats_game_server_sessions_session_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Kill", b =>
                {
                    b.HasOne("TF47_API.Database.Models.GameServer.Player", "Killer")
                        .WithMany("PlayerKills")
                        .HasForeignKey("KillerId")
                        .HasConstraintName("fk_game_server_kills_game_server_players_player_uid");

                    b.HasOne("TF47_API.Database.Models.GameServer.Session", "Session")
                        .WithMany("Kills")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("fk_game_server_kills_game_server_sessions_session_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TF47_API.Database.Models.GameServer.Player", "Victim")
                        .WithMany("PlayerDeaths")
                        .HasForeignKey("VictimId")
                        .HasConstraintName("fk_game_server_kills_game_server_players_victim_id");

                    b.Navigation("Killer");

                    b.Navigation("Session");

                    b.Navigation("Victim");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Mission", b =>
                {
                    b.HasOne("TF47_API.Database.Models.GameServer.Campaign", "Campaign")
                        .WithMany("Missions")
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("fk_game_server_mission_game_server_campaigns_campaign_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Note", b =>
                {
                    b.HasOne("TF47_API.Database.Models.GameServer.Player", "Player")
                        .WithMany("PlayerNotes")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("fk_game_server_notes_game_server_players_player_id");

                    b.HasOne("TF47_API.Database.Models.Services.User", "Writer")
                        .WithMany("WrittenNotes")
                        .HasForeignKey("WriterId")
                        .HasConstraintName("fk_game_server_notes_service_users_writer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Playtime", b =>
                {
                    b.HasOne("TF47_API.Database.Models.GameServer.Player", "Player")
                        .WithOne("PlayerPlaytime")
                        .HasForeignKey("TF47_API.Database.Models.GameServer.Playtime", "PlayerId")
                        .HasConstraintName("fk_game_server_playtimes_game_server_players_player_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TF47_API.Database.Models.GameServer.Session", "Session")
                        .WithMany("PlayTimes")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("fk_game_server_playtimes_game_server_sessions_session_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Session", b =>
                {
                    b.HasOne("TF47_API.Database.Models.GameServer.Mission", "Mission")
                        .WithMany("Sessions")
                        .HasForeignKey("MissionId")
                        .HasConstraintName("fk_game_server_sessions_game_server_mission_mission_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mission");
                });

            modelBuilder.Entity("TF47_API.Database.Models.Services.ApiKey", b =>
                {
                    b.HasOne("TF47_API.Database.Models.Services.User", "Owner")
                        .WithMany("ApiKeys")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_service_api_keys_service_users_owner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TF47_API.Database.Models.Services.Changelog", b =>
                {
                    b.HasOne("TF47_API.Database.Models.Services.User", "Author")
                        .WithMany("WrittenChangelogs")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_service_changelogs_service_users_author_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("TF47_API.Database.Models.Services.GroupPermission", b =>
                {
                    b.HasOne("TF47_API.Database.Models.Services.Group", "Group")
                        .WithOne("GroupPermission")
                        .HasForeignKey("TF47_API.Database.Models.Services.GroupPermission", "GroupId")
                        .HasConstraintName("fk_service_group_permissions_service_groups_group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("TF47_API.Database.Models.Services.Issue", b =>
                {
                    b.HasOne("TF47_API.Database.Models.Services.User", "IssueCreator")
                        .WithMany()
                        .HasForeignKey("IssueCreatorUserId")
                        .HasConstraintName("fk_service_issues_service_users_issue_creator_user_id");

                    b.HasOne("TF47_API.Database.Models.Services.IssueGroup", "IssueGroup")
                        .WithMany("Issues")
                        .HasForeignKey("IssueGroupId")
                        .HasConstraintName("fk_service_issues_service_issue_groups_issue_group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IssueCreator");

                    b.Navigation("IssueGroup");
                });

            modelBuilder.Entity("TF47_API.Database.Models.Services.IssueItem", b =>
                {
                    b.HasOne("TF47_API.Database.Models.Services.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorUserId")
                        .HasConstraintName("fk_service_issue_items_service_users_author_user_id");

                    b.HasOne("TF47_API.Database.Models.Services.Issue", "Issue")
                        .WithMany("IssueItems")
                        .HasForeignKey("IssueId")
                        .HasConstraintName("fk_service_issue_items_service_issues_issue_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Campaign", b =>
                {
                    b.Navigation("Missions");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Mission", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Player", b =>
                {
                    b.Navigation("PlayerChats");

                    b.Navigation("PlayerDeaths");

                    b.Navigation("PlayerKills");

                    b.Navigation("PlayerNotes");

                    b.Navigation("PlayerPlaytime");
                });

            modelBuilder.Entity("TF47_API.Database.Models.GameServer.Session", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Kills");

                    b.Navigation("PlayTimes");

                    b.Navigation("ReplayItems");
                });

            modelBuilder.Entity("TF47_API.Database.Models.Services.Group", b =>
                {
                    b.Navigation("GroupPermission");
                });

            modelBuilder.Entity("TF47_API.Database.Models.Services.Issue", b =>
                {
                    b.Navigation("IssueItems");
                });

            modelBuilder.Entity("TF47_API.Database.Models.Services.IssueGroup", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("TF47_API.Database.Models.Services.User", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("WrittenChangelogs");

                    b.Navigation("WrittenNotes");
                });
#pragma warning restore 612, 618
        }
    }
}
