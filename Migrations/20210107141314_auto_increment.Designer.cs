// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using TF47_Backend.Database;

namespace TF47_Backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210107141314_auto_increment")]
    partial class auto_increment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresEnum(null, "side", new[] { "civilian", "bluefor", "redfor", "independent" })
                .HasPostgresEnum(null, "vehicle_type", new[] { "infantry", "light_vehicle", "tank", "helicopter", "fixed_wing", "boat" })
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("TF47_Backend.Database.Models.Campaign", b =>
                {
                    b.Property<long>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("campaign_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_created");

                    b.HasKey("CampaignId")
                        .HasName("pk_campaigns");

                    b.ToTable("campaigns");
                });

            modelBuilder.Entity("TF47_Backend.Database.Models.Kill", b =>
                {
                    b.Property<long>("KillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("kill_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<long>("Distance")
                        .HasColumnType("bigint")
                        .HasColumnName("distance");

                    b.Property<long>("GameTime")
                        .HasColumnType("bigint")
                        .HasColumnName("game_time");

                    b.Property<long?>("KillerPlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("killer_player_id");

                    b.Property<int>("KillerSide")
                        .HasColumnType("integer")
                        .HasColumnName("killer_side");

                    b.Property<int>("KillerVehicleType")
                        .HasColumnType("integer")
                        .HasColumnName("killer_vehicle_type");

                    b.Property<DateTime>("RealTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("real_time");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint")
                        .HasColumnName("session_id");

                    b.Property<string>("VehicleName")
                        .HasColumnType("text")
                        .HasColumnName("vehicle_name");

                    b.Property<long?>("VictimPlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("victim_player_id");

                    b.Property<int>("VictimSide")
                        .HasColumnType("integer")
                        .HasColumnName("victim_side");

                    b.Property<int>("VictimVehicleType")
                        .HasColumnType("integer")
                        .HasColumnName("victim_vehicle_type");

                    b.Property<string>("Weapon")
                        .HasColumnType("text")
                        .HasColumnName("weapon");

                    b.HasKey("KillId")
                        .HasName("pk_kills");

                    b.HasIndex("KillerPlayerId")
                        .HasDatabaseName("ix_kills_killer_player_id");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_kills_session_id");

                    b.HasIndex("VictimPlayerId")
                        .HasDatabaseName("ix_kills_victim_player_id");

                    b.ToTable("kills");
                });

            modelBuilder.Entity("TF47_Backend.Database.Models.Mission", b =>
                {
                    b.Property<long>("MissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("mission_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<long?>("CampaignId")
                        .HasColumnType("bigint")
                        .HasColumnName("campaign_id");

                    b.Property<int>("MissionType")
                        .HasColumnType("integer")
                        .HasColumnName("mission_type");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("MissionId")
                        .HasName("pk_missions");

                    b.HasIndex("CampaignId")
                        .HasDatabaseName("ix_missions_campaign_id");

                    b.ToTable("missions");
                });

            modelBuilder.Entity("TF47_Backend.Database.Models.Player", b =>
                {
                    b.Property<long>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("player_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<DateTime>("FirstVisit")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("first_visit");

                    b.Property<DateTime>("LastVisit")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_visit");

                    b.Property<string>("PlayerName")
                        .HasColumnType("text")
                        .HasColumnName("player_name");

                    b.Property<string>("PlayerUid")
                        .HasColumnType("text")
                        .HasColumnName("player_uid");

                    b.HasKey("PlayerId")
                        .HasName("pk_players");

                    b.ToTable("players");
                });

            modelBuilder.Entity("TF47_Backend.Database.Models.Playtime", b =>
                {
                    b.Property<long>("PlayTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("play_time_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_id");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint")
                        .HasColumnName("session_id");

                    b.Property<TimeSpan>("TimePlayedBoat")
                        .HasColumnType("interval")
                        .HasColumnName("time_played_boat");

                    b.Property<TimeSpan>("TimePlayedFixedWing")
                        .HasColumnType("interval")
                        .HasColumnName("time_played_fixed_wing");

                    b.Property<TimeSpan>("TimePlayedHelicopter")
                        .HasColumnType("interval")
                        .HasColumnName("time_played_helicopter");

                    b.Property<TimeSpan>("TimePlayedInfantry")
                        .HasColumnType("interval")
                        .HasColumnName("time_played_infantry");

                    b.Property<TimeSpan>("TimePlayedTank")
                        .HasColumnType("interval")
                        .HasColumnName("time_played_tank");

                    b.Property<TimeSpan>("TimePlayedVehicle")
                        .HasColumnType("interval")
                        .HasColumnName("time_played_vehicle");

                    b.Property<TimeSpan>("TimeTrackedObjective")
                        .HasColumnType("interval")
                        .HasColumnName("time_tracked_objective");

                    b.HasKey("PlayTimeId")
                        .HasName("pk_playtimes");

                    b.HasIndex("PlayerId")
                        .IsUnique()
                        .HasDatabaseName("ix_playtimes_player_id");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_playtimes_session_id");

                    b.ToTable("playtimes");
                });

            modelBuilder.Entity("TF47_Backend.Database.Models.Position", b =>
                {
                    b.Property<long>("PositionTrackerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("position_tracker_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<long>("Direction")
                        .HasColumnType("bigint")
                        .HasColumnName("direction");

                    b.Property<string>("Group")
                        .HasColumnType("text")
                        .HasColumnName("group");

                    b.Property<bool>("IsAwake")
                        .HasColumnType("boolean")
                        .HasColumnName("is_awake");

                    b.Property<bool>("IsDriver")
                        .HasColumnType("boolean")
                        .HasColumnName("is_driver");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_id");

                    b.Property<NpgsqlPoint>("Pos")
                        .HasColumnType("point")
                        .HasColumnName("pos");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint")
                        .HasColumnName("session_id");

                    b.Property<int>("Side")
                        .HasColumnType("integer")
                        .HasColumnName("side");

                    b.Property<string>("VehicleName")
                        .HasColumnType("text")
                        .HasColumnName("vehicle_name");

                    b.Property<int>("VehicleType")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_type");

                    b.Property<long>("Velocity")
                        .HasColumnType("bigint")
                        .HasColumnName("velocity");

                    b.HasKey("PositionTrackerId")
                        .HasName("pk_positions");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_positions_player_id");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_positions_session_id");

                    b.ToTable("positions");
                });

            modelBuilder.Entity("TF47_Backend.Database.Models.Session", b =>
                {
                    b.Property<long>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("session_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<long?>("MissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("mission_id");

                    b.Property<int>("MissionType")
                        .HasColumnType("integer")
                        .HasColumnName("mission_type");

                    b.Property<DateTime>("SessionCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("session_created");

                    b.Property<DateTime?>("SessionEnded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("session_ended");

                    b.Property<string>("WorldName")
                        .HasColumnType("text")
                        .HasColumnName("world_name");

                    b.HasKey("SessionId")
                        .HasName("pk_sessions");

                    b.HasIndex("MissionId")
                        .HasDatabaseName("ix_sessions_mission_id");

                    b.ToTable("sessions");
                });

            modelBuilder.Entity("TF47_Backend.Database.Models.Whitelist", b =>
                {
                    b.Property<long>("WhitelistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("whitelist_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("WhitelistId")
                        .HasName("pk_whitelist");

                    b.ToTable("whitelist");
                });

            modelBuilder.Entity("TF47_Backend.Database.Models.Whitelisting", b =>
                {
                    b.Property<long>("WhitelistingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("whitelisting_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<long?>("PlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_id");

                    b.Property<long?>("WhitelistId")
                        .HasColumnType("bigint")
                        .HasColumnName("whitelist_id");

                    b.HasKey("WhitelistingId")
                        .HasName("pk_whitelisting");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_whitelisting_player_id");

                    b.HasIndex("WhitelistId")
                        .HasDatabaseName("ix_whitelisting_whitelist_id");

                    b.ToTable("whitelisting");
                });

            modelBuilder.Entity("TF47_Backend.Database.Models.Kill", b =>
                {
                    b.HasOne("TF47_Backend.Database.Models.Player", "Killer")
                        .WithMany("PlayerKills")
                        .HasForeignKey("KillerPlayerId")
                        .HasConstraintName("fk_kills_players_player_id");

                    b.HasOne("TF47_Backend.Database.Models.Session", "Session")
                        .WithMany("Kills")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("fk_kills_sessions_session_id");

                    b.HasOne("TF47_Backend.Database.Models.Player", "Victim")
                        .WithMany("PlayerDeaths")
                        .HasForeignKey("VictimPlayerId")
                        .HasConstraintName("fk_kills_players_victim_player_id");

                    b.Navigation("Killer");

                    b.Navigation("Session");

                    b.Navigation("Victim");
                });

            modelBuilder.Entity("TF47_Backend.Database.Models.Mission", b =>
                {
                    b.HasOne("TF47_Backend.Database.Models.Campaign", "Campaign")
                        .WithMany("Missions")
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("fk_missions_campaigns_campaign_id");

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("TF47_Backend.Database.Models.Playtime", b =>
                {
                    b.HasOne("TF47_Backend.Database.Models.Player", "Player")
                        .WithOne("PlayerPlaytime")
                        .HasForeignKey("TF47_Backend.Database.Models.Playtime", "PlayerId")
                        .HasConstraintName("fk_playtimes_players_player_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TF47_Backend.Database.Models.Session", "Session")
                        .WithMany("PlayTimes")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("fk_playtimes_sessions_session_id");

                    b.Navigation("Player");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("TF47_Backend.Database.Models.Position", b =>
                {
                    b.HasOne("TF47_Backend.Database.Models.Player", "Player")
                        .WithMany("PlayerPositions")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("fk_positions_players_player_id");

                    b.HasOne("TF47_Backend.Database.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .HasConstraintName("fk_positions_sessions_session_id");

                    b.Navigation("Player");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("TF47_Backend.Database.Models.Session", b =>
                {
                    b.HasOne("TF47_Backend.Database.Models.Mission", "Mission")
                        .WithMany("Sessions")
                        .HasForeignKey("MissionId")
                        .HasConstraintName("fk_sessions_missions_mission_id");

                    b.Navigation("Mission");
                });

            modelBuilder.Entity("TF47_Backend.Database.Models.Whitelisting", b =>
                {
                    b.HasOne("TF47_Backend.Database.Models.Player", "Player")
                        .WithMany("PlayerWhitelistings")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("fk_whitelisting_players_player_id");

                    b.HasOne("TF47_Backend.Database.Models.Whitelist", "Whitelist")
                        .WithMany()
                        .HasForeignKey("WhitelistId")
                        .HasConstraintName("fk_whitelisting_whitelist_whitelist_id");

                    b.Navigation("Player");

                    b.Navigation("Whitelist");
                });

            modelBuilder.Entity("TF47_Backend.Database.Models.Campaign", b =>
                {
                    b.Navigation("Missions");
                });

            modelBuilder.Entity("TF47_Backend.Database.Models.Mission", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("TF47_Backend.Database.Models.Player", b =>
                {
                    b.Navigation("PlayerDeaths");

                    b.Navigation("PlayerKills");

                    b.Navigation("PlayerPlaytime");

                    b.Navigation("PlayerPositions");

                    b.Navigation("PlayerWhitelistings");
                });

            modelBuilder.Entity("TF47_Backend.Database.Models.Session", b =>
                {
                    b.Navigation("Kills");

                    b.Navigation("PlayTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
